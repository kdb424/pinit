#!/usr/bin/python3
import ctypes
import os
import subprocess
import sys
from time import sleep

print("Starting init")

def do_cmd(cmd):
    """Writes commands to the init file"""
    f = open(init_file, 'w')
    f.write('{} '.format(cmd))
    f.close()


def sys_power(cmd):
    """Issues poweroff, reboot, or halt"""
    # Get access to syscalls
    libc = ctypes.CDLL(None)

    print('System going down now.')
    REBOOT = 0x1234567
    SHUTDOWN = 0x4321fedc
    if cmd == 'poweroff' or cmd == 'halt':
        libc.reboot(SHUTDOWN)
    elif cmd == 'reboot':
        libc.reboot(REBOOT)

def virt_mount(type, device, dir, opts):
    try:
        os.mkdir(dir)
    except:
        pass
    os.system('mount -t {}, {}, {} -o {}'.format(type, device, dir, opts))

def get_fstab():
    with open('/etc/fstab') as i:
        return [
            line for line in (
                l.strip() for l in i
            )

            if not line.startswith('#')
        ]


def init():
    # Remove nologin file
    try:
        os.remove('/run/nologin')
    except:
        pass

    # Mount virtual filesystems
    print('Mounting virtual filesystems')
    virt_mount('proc', 'proc', '/proc', 'nosuid,noexec,nodev')
    virt_mount('sysfs', 'sys', '/sys', 'nosuid,noexec,nodev')
    virt_mount('tmpfs', 'run', '/run', 'mode=0755,nosuid,nodev')
    #virt_mount('devtmpfs', 'dev', '/dev', 'mode=0755,nosuid')
    virt_mount('devpts', 'devpts', '/dev/pts', 'mode=0620,gid=5,nosuid,noexec')
    virt_mount('tmpfs', 'shm', '/dev/shm', 'mode=1777,nosuid,nodev')

    # Mount local filesystems
    print('Mounting local filesystems')
    for i in get_fstab():
        # Mount only filesystems that are local physical devices
        try:
            if i.split()[1] == '/':
                os.system('mount / -o remount,rw')

            elif i.split()[1] == 'swap':
                os.system('swapon {}'.format(i.split()[0]))
            else:
                if i.lstrip().startswith('UUID='):
                    os.system('mount {}'.format(i.split()[1]))

                if i.lstrip().startswith('LABEL='):
                    os.system('mount {}'.format(i.split()[1]))

                if i.lstrip().startswith('/dev/'):
                    os.system('mount {}'.format(i.split()[1]))
        except:
            pass  # Comment or empty line


    # Reset init file
    f = open('/run/initctl', 'w')
    f.close()


    # Set hostname
    print('Setting hostname')
    try:
        f = open('/etc/hostname', 'r')
        hostname = f.read().rstrip()
        f.close()
        f = open('/proc/sys/kernel/hostname', 'w')
        f.write(hostname)
        f.close()
    except:
        #TODO Handle file not existing
        pass


    # Start udev daemon
    print('Starting udev daemon')
    os.system('/sbin/udevd --daemon')

    # Trigger udev events
    print('Triggering udev events')
    os.system('udevadm trigger --action=add --type=subsystems')
    os.system('udevadm trigger --action=add --type=devices')

    # Wait for udev to settle
    print('Waiting for udev uevents to be processed')
    os.system('udevadm settle')


    # Bring up loopback
    print('Bringing up lo')
    try:
        f = open('/sys/class/net/lo', 'w')
        f.close()
        os.system('ip link set up dev lo')
    except:
        pass

    # Start service manager
    try:
        subprocess.Popen(['/sbin/srvmgr'], preexec_fn=os.setsid)

    except:
        print('Could not start service manager')

    # Create FIFO file
    try:
        os.mkfifo('/tmp/initcom')
    except OSError as e:
        print('Failed to create FIFO: %s' % e)


def shutdown(powerstate):
    print('Shutting down service manager')
    srvmgrPID = os.system('pidof srvmgr')
    os.system('kill {}'.format(srvmgrPID))

    print('Shutting down udev')
    os.system('udevadm control --exit')

    os.remove('/tmp/initcom')

    print('Syncing filesystems')
    sys_sync()

    print('Remounting real filesystems RO')
    for i in get_fstab():
        # Unmount only filesystems that are local physical devices
        try:
            if i.split()[1] == '/':
                os.system('mount / -o remount,ro')

            elif i.split()[1] == 'swap':
                os.system('swapoff {}'.format(i.split()[0]))
            else:
                if i.lstrip().startswith('UUID='):
                    os.system('umount {}'.format(i.split()[1]))

                if i.lstrip().startswith('LABEL='):
                    os.system('umount {}'.format(i.split()[1]))

                if i.lstrip().startswith('/dev/'):
                    os.system('umount {}'.format(i.split()[1]))
        except:
            pass  # Comment or empty line

    print('System halting')
    sys_power(powerstate)


def sys_sync():
    os.system('sync')


if __name__ == "__main__":
    if len(sys.argv) > 1:
        init()
        if sys.argv[1] == 'emergency':
            subprocess.Popen(['/sbin/agetty', '--noclear', 'tty0', '--autologin', 'root'], preexec_fn=os.setsid)
    else:
        # Start tty1
        init()

        subprocess.Popen(['/sbin/agetty', '--noclear', 'tty0'], preexec_fn=os.setsid)

        while True:
            #TODO Remove this file communication nonsence. It is here for testing only
            try:
                f = open('/tmp/initcom', 'r')
                readin = f.read().strip()
                f.close()
                if readin == 'halt' or readin == 'reboot' or readin == 'poweroff':
                    shutdown(readin)
            except Exception as e:
                sleep(1)

